// Generated by dts-bundle-generator v9.5.1

type MarkedToken = (Tokens.Blockquote | Tokens.Br | Tokens.Code | Tokens.Codespan | Tokens.Def | Tokens.Del | Tokens.Em | Tokens.Escape | Tokens.Heading | Tokens.Hr | Tokens.HTML | Tokens.Image | Tokens.Link | Tokens.List | Tokens.ListItem | Tokens.Paragraph | Tokens.Space | Tokens.Strong | Tokens.Table | Tokens.Tag | Tokens.Text);
type Token = (MarkedToken | Tokens.Generic);
declare namespace Tokens {
	interface Blockquote {
		type: "blockquote";
		raw: string;
		text: string;
		tokens: Token[];
	}
	interface Br {
		type: "br";
		raw: string;
	}
	interface Checkbox {
		checked: boolean;
	}
	interface Code {
		type: "code";
		raw: string;
		codeBlockStyle?: "indented";
		lang?: string;
		text: string;
		escaped?: boolean;
	}
	interface Codespan {
		type: "codespan";
		raw: string;
		text: string;
	}
	interface Def {
		type: "def";
		raw: string;
		tag: string;
		href: string;
		title: string;
	}
	interface Del {
		type: "del";
		raw: string;
		text: string;
		tokens: Token[];
	}
	interface Em {
		type: "em";
		raw: string;
		text: string;
		tokens: Token[];
	}
	interface Escape {
		type: "escape";
		raw: string;
		text: string;
	}
	interface Generic {
		[index: string]: any;
		type: string;
		raw: string;
		tokens?: Token[];
	}
	interface Heading {
		type: "heading";
		raw: string;
		depth: number;
		text: string;
		tokens: Token[];
	}
	interface Hr {
		type: "hr";
		raw: string;
	}
	interface HTML {
		type: "html";
		raw: string;
		pre: boolean;
		text: string;
		block: boolean;
	}
	interface Image {
		type: "image";
		raw: string;
		href: string;
		title: string | null;
		text: string;
		tokens: Token[];
	}
	interface Link {
		type: "link";
		raw: string;
		href: string;
		title?: string | null;
		text: string;
		tokens: Token[];
	}
	interface List {
		type: "list";
		raw: string;
		ordered: boolean;
		start: number | "";
		loose: boolean;
		items: ListItem[];
	}
	interface ListItem {
		type: "list_item";
		raw: string;
		task: boolean;
		checked?: boolean;
		loose: boolean;
		text: string;
		tokens: Token[];
	}
	interface Paragraph {
		type: "paragraph";
		raw: string;
		pre?: boolean;
		text: string;
		tokens: Token[];
	}
	interface Space {
		type: "space";
		raw: string;
	}
	interface Strong {
		type: "strong";
		raw: string;
		text: string;
		tokens: Token[];
	}
	interface Table {
		type: "table";
		raw: string;
		align: Array<"center" | "left" | "right" | null>;
		header: TableCell[];
		rows: TableCell[][];
	}
	interface TableCell {
		text: string;
		tokens: Token[];
		header: boolean;
		align: "center" | "left" | "right" | null;
	}
	interface TableRow {
		text: string;
	}
	interface Tag {
		type: "html";
		raw: string;
		inLink: boolean;
		inRawBlock: boolean;
		text: string;
		block: boolean;
	}
	interface Text {
		type: "text";
		raw: string;
		text: string;
		tokens?: Token[];
		escaped?: boolean;
	}
}
type Links = Record<string, Pick<Tokens.Link | Tokens.Image, "href" | "title">>;
type TokensList = Token[] & {
	links: Links;
};
/**
 * Renderer
 */
declare class _Renderer {
	options: MarkedOptions;
	parser: _Parser;
	constructor(options?: MarkedOptions);
	space(token: Tokens.Space): string;
	code({ text, lang, escaped }: Tokens.Code): string;
	blockquote({ tokens }: Tokens.Blockquote): string;
	html({ text }: Tokens.HTML | Tokens.Tag): string;
	heading({ tokens, depth }: Tokens.Heading): string;
	hr(token: Tokens.Hr): string;
	list(token: Tokens.List): string;
	listitem(item: Tokens.ListItem): string;
	checkbox({ checked }: Tokens.Checkbox): string;
	paragraph({ tokens }: Tokens.Paragraph): string;
	table(token: Tokens.Table): string;
	tablerow({ text }: Tokens.TableRow): string;
	tablecell(token: Tokens.TableCell): string;
	/**
	 * span level renderer
	 */
	strong({ tokens }: Tokens.Strong): string;
	em({ tokens }: Tokens.Em): string;
	codespan({ text }: Tokens.Codespan): string;
	br(token: Tokens.Br): string;
	del({ tokens }: Tokens.Del): string;
	link({ href, title, tokens }: Tokens.Link): string;
	image({ href, title, text, tokens }: Tokens.Image): string;
	text(token: Tokens.Text | Tokens.Escape): string;
}
/**
 * TextRenderer
 * returns only the textual part of the token
 */
declare class _TextRenderer {
	strong({ text }: Tokens.Strong): string;
	em({ text }: Tokens.Em): string;
	codespan({ text }: Tokens.Codespan): string;
	del({ text }: Tokens.Del): string;
	html({ text }: Tokens.HTML | Tokens.Tag): string;
	text({ text }: Tokens.Text | Tokens.Escape | Tokens.Tag): string;
	link({ text }: Tokens.Link): string;
	image({ text }: Tokens.Image): string;
	br(): string;
}
/**
 * Parsing & Compiling
 */
declare class _Parser {
	options: MarkedOptions;
	renderer: _Renderer;
	textRenderer: _TextRenderer;
	constructor(options?: MarkedOptions);
	/**
	 * Static Parse Method
	 */
	static parse(tokens: Token[], options?: MarkedOptions): string;
	/**
	 * Static Parse Inline Method
	 */
	static parseInline(tokens: Token[], options?: MarkedOptions): string;
	/**
	 * Parse Loop
	 */
	parse(tokens: Token[], top?: boolean): string;
	/**
	 * Parse Inline Tokens
	 */
	parseInline(tokens: Token[], renderer?: _Renderer | _TextRenderer): string;
}
declare const other: {
	codeRemoveIndent: RegExp;
	outputLinkReplace: RegExp;
	indentCodeCompensation: RegExp;
	beginningSpace: RegExp;
	endingHash: RegExp;
	startingSpaceChar: RegExp;
	endingSpaceChar: RegExp;
	nonSpaceChar: RegExp;
	newLineCharGlobal: RegExp;
	tabCharGlobal: RegExp;
	multipleSpaceGlobal: RegExp;
	blankLine: RegExp;
	doubleBlankLine: RegExp;
	blockquoteStart: RegExp;
	blockquoteSetextReplace: RegExp;
	blockquoteSetextReplace2: RegExp;
	listReplaceTabs: RegExp;
	listReplaceNesting: RegExp;
	listIsTask: RegExp;
	listReplaceTask: RegExp;
	anyLine: RegExp;
	hrefBrackets: RegExp;
	tableDelimiter: RegExp;
	tableAlignChars: RegExp;
	tableRowBlankLine: RegExp;
	tableAlignRight: RegExp;
	tableAlignCenter: RegExp;
	tableAlignLeft: RegExp;
	startATag: RegExp;
	endATag: RegExp;
	startPreScriptTag: RegExp;
	endPreScriptTag: RegExp;
	startAngleBracket: RegExp;
	endAngleBracket: RegExp;
	pedanticHrefTitle: RegExp;
	unicodeAlphaNumeric: RegExp;
	escapeTest: RegExp;
	escapeReplace: RegExp;
	escapeTestNoEncode: RegExp;
	escapeReplaceNoEncode: RegExp;
	unescapeTest: RegExp;
	caret: RegExp;
	percentDecode: RegExp;
	findPipe: RegExp;
	splitPipe: RegExp;
	slashPipe: RegExp;
	carriageReturn: RegExp;
	spaceLine: RegExp;
	notSpaceStart: RegExp;
	endingNewline: RegExp;
	listItemRegex: (bull: string) => RegExp;
	nextBulletRegex: (indent: number) => RegExp;
	hrRegex: (indent: number) => RegExp;
	fencesBeginRegex: (indent: number) => RegExp;
	headingBeginRegex: (indent: number) => RegExp;
	htmlBeginRegex: (indent: number) => RegExp;
};
declare const blockNormal: {
	blockquote: RegExp;
	code: RegExp;
	def: RegExp;
	fences: RegExp;
	heading: RegExp;
	hr: RegExp;
	html: RegExp;
	lheading: RegExp;
	list: RegExp;
	newline: RegExp;
	paragraph: RegExp;
	table: RegExp;
	text: RegExp;
};
type BlockKeys = keyof typeof blockNormal;
declare const inlineNormal: {
	_backpedal: RegExp;
	anyPunctuation: RegExp;
	autolink: RegExp;
	blockSkip: RegExp;
	br: RegExp;
	code: RegExp;
	del: RegExp;
	emStrongLDelim: RegExp;
	emStrongRDelimAst: RegExp;
	emStrongRDelimUnd: RegExp;
	escape: RegExp;
	link: RegExp;
	nolink: RegExp;
	punctuation: RegExp;
	reflink: RegExp;
	reflinkSearch: RegExp;
	tag: RegExp;
	text: RegExp;
	url: RegExp;
};
type InlineKeys = keyof typeof inlineNormal;
interface Rules {
	other: typeof other;
	block: Record<BlockKeys, RegExp>;
	inline: Record<InlineKeys, RegExp>;
}
/**
 * Tokenizer
 */
declare class _Tokenizer {
	options: MarkedOptions;
	rules: Rules;
	lexer: _Lexer;
	constructor(options?: MarkedOptions);
	space(src: string): Tokens.Space | undefined;
	code(src: string): Tokens.Code | undefined;
	fences(src: string): Tokens.Code | undefined;
	heading(src: string): Tokens.Heading | undefined;
	hr(src: string): Tokens.Hr | undefined;
	blockquote(src: string): Tokens.Blockquote | undefined;
	list(src: string): Tokens.List | undefined;
	html(src: string): Tokens.HTML | undefined;
	def(src: string): Tokens.Def | undefined;
	table(src: string): Tokens.Table | undefined;
	lheading(src: string): Tokens.Heading | undefined;
	paragraph(src: string): Tokens.Paragraph | undefined;
	text(src: string): Tokens.Text | undefined;
	escape(src: string): Tokens.Escape | undefined;
	tag(src: string): Tokens.Tag | undefined;
	link(src: string): Tokens.Link | Tokens.Image | undefined;
	reflink(src: string, links: Links): Tokens.Link | Tokens.Image | Tokens.Text | undefined;
	emStrong(src: string, maskedSrc: string, prevChar?: string): Tokens.Em | Tokens.Strong | undefined;
	codespan(src: string): Tokens.Codespan | undefined;
	br(src: string): Tokens.Br | undefined;
	del(src: string): Tokens.Del | undefined;
	autolink(src: string): Tokens.Link | undefined;
	url(src: string): Tokens.Link | undefined;
	inlineText(src: string): Tokens.Text | undefined;
}
declare class _Hooks {
	options: MarkedOptions;
	block?: boolean;
	constructor(options?: MarkedOptions);
	static passThroughHooks: Set<string>;
	/**
	 * Process markdown before marked
	 */
	preprocess(markdown: string): string;
	/**
	 * Process HTML after marked is finished
	 */
	postprocess(html: string): string;
	/**
	 * Process all tokens before walk tokens
	 */
	processAllTokens(tokens: Token[] | TokensList): Token[] | TokensList;
	/**
	 * Provide function to tokenize markdown
	 */
	provideLexer(): typeof _Lexer.lexInline;
	/**
	 * Provide function to parse tokens
	 */
	provideParser(): typeof _Parser.parse;
}
interface TokenizerThis {
	lexer: _Lexer;
}
type TokenizerExtensionFunction = (this: TokenizerThis, src: string, tokens: Token[] | TokensList) => Tokens.Generic | undefined;
type TokenizerStartFunction = (this: TokenizerThis, src: string) => number | void;
interface TokenizerExtension {
	name: string;
	level: "block" | "inline";
	start?: TokenizerStartFunction;
	tokenizer: TokenizerExtensionFunction;
	childTokens?: string[];
}
interface RendererThis {
	parser: _Parser;
}
type RendererExtensionFunction = (this: RendererThis, token: Tokens.Generic) => string | false | undefined;
interface RendererExtension {
	name: string;
	renderer: RendererExtensionFunction;
}
type TokenizerAndRendererExtension = TokenizerExtension | RendererExtension | (TokenizerExtension & RendererExtension);
type HooksApi = Omit<_Hooks, "constructor" | "options" | "block">;
type HooksObject = {
	[K in keyof HooksApi]?: (this: _Hooks, ...args: Parameters<HooksApi[K]>) => ReturnType<HooksApi[K]> | Promise<ReturnType<HooksApi[K]>>;
};
type RendererApi = Omit<_Renderer, "constructor" | "options" | "parser">;
type RendererObject = {
	[K in keyof RendererApi]?: (this: _Renderer, ...args: Parameters<RendererApi[K]>) => ReturnType<RendererApi[K]> | false;
};
type TokenizerApi = Omit<_Tokenizer, "constructor" | "options" | "rules" | "lexer">;
type TokenizerObject = {
	[K in keyof TokenizerApi]?: (this: _Tokenizer, ...args: Parameters<TokenizerApi[K]>) => ReturnType<TokenizerApi[K]> | false;
};
interface MarkedExtension {
	/**
	 * True will tell marked to await any walkTokens functions before parsing the tokens and returning an HTML string.
	 */
	async?: boolean;
	/**
	 * Enable GFM line breaks. This option requires the gfm option to be true.
	 */
	breaks?: boolean;
	/**
	 * Add tokenizers and renderers to marked
	 */
	extensions?: TokenizerAndRendererExtension[] | null;
	/**
	 * Enable GitHub flavored markdown.
	 */
	gfm?: boolean;
	/**
	 * Hooks are methods that hook into some part of marked.
	 * preprocess is called to process markdown before sending it to marked.
	 * processAllTokens is called with the TokensList before walkTokens.
	 * postprocess is called to process html after marked has finished parsing.
	 * provideLexer is called to provide a function to tokenize markdown.
	 * provideParser is called to provide a function to parse tokens.
	 */
	hooks?: HooksObject | null;
	/**
	 * Conform to obscure parts of markdown.pl as much as possible. Don't fix any of the original markdown bugs or poor behavior.
	 */
	pedantic?: boolean;
	/**
	 * Type: object Default: new Renderer()
	 *
	 * An object containing functions to render tokens to HTML.
	 */
	renderer?: RendererObject | null;
	/**
	 * Shows an HTML error message when rendering fails.
	 */
	silent?: boolean;
	/**
	 * The tokenizer defines how to turn markdown text into tokens.
	 */
	tokenizer?: TokenizerObject | null;
	/**
	 * The walkTokens function gets called with every token.
	 * Child tokens are called before moving on to sibling tokens.
	 * Each token is passed by reference so updates are persisted when passed to the parser.
	 * The return value of the function is ignored.
	 */
	walkTokens?: ((token: Token) => void | Promise<void>) | null;
}
interface MarkedOptions extends Omit<MarkedExtension, "hooks" | "renderer" | "tokenizer" | "extensions" | "walkTokens"> {
	/**
	 * Hooks are methods that hook into some part of marked.
	 */
	hooks?: _Hooks | null;
	/**
	 * Type: object Default: new Renderer()
	 *
	 * An object containing functions to render tokens to HTML.
	 */
	renderer?: _Renderer | null;
	/**
	 * The tokenizer defines how to turn markdown text into tokens.
	 */
	tokenizer?: _Tokenizer | null;
	/**
	 * Custom extensions
	 */
	extensions?: null | {
		renderers: {
			[name: string]: RendererExtensionFunction;
		};
		childTokens: {
			[name: string]: string[];
		};
		inline?: TokenizerExtensionFunction[];
		block?: TokenizerExtensionFunction[];
		startInline?: TokenizerStartFunction[];
		startBlock?: TokenizerStartFunction[];
	};
	/**
	 * walkTokens function returns array of values for Promise.all
	 */
	walkTokens?: null | ((token: Token) => void | Promise<void> | (void | Promise<void>)[]);
}
/**
 * Block Lexer
 */
declare class _Lexer {
	tokens: TokensList;
	options: MarkedOptions;
	state: {
		inLink: boolean;
		inRawBlock: boolean;
		top: boolean;
	};
	private tokenizer;
	private inlineQueue;
	constructor(options?: MarkedOptions);
	/**
	 * Expose Rules
	 */
	static get rules(): {
		block: {
			normal: {
				blockquote: RegExp;
				code: RegExp;
				def: RegExp;
				fences: RegExp;
				heading: RegExp;
				hr: RegExp;
				html: RegExp;
				lheading: RegExp;
				list: RegExp;
				newline: RegExp;
				paragraph: RegExp;
				table: RegExp;
				text: RegExp;
			};
			gfm: Record<"code" | "blockquote" | "hr" | "html" | "table" | "text" | "def" | "heading" | "list" | "paragraph" | "fences" | "lheading" | "newline", RegExp>;
			pedantic: Record<"code" | "blockquote" | "hr" | "html" | "table" | "text" | "def" | "heading" | "list" | "paragraph" | "fences" | "lheading" | "newline", RegExp>;
		};
		inline: {
			normal: {
				_backpedal: RegExp;
				anyPunctuation: RegExp;
				autolink: RegExp;
				blockSkip: RegExp;
				br: RegExp;
				code: RegExp;
				del: RegExp;
				emStrongLDelim: RegExp;
				emStrongRDelimAst: RegExp;
				emStrongRDelimUnd: RegExp;
				escape: RegExp;
				link: RegExp;
				nolink: RegExp;
				punctuation: RegExp;
				reflink: RegExp;
				reflinkSearch: RegExp;
				tag: RegExp;
				text: RegExp;
				url: RegExp;
			};
			gfm: Record<"link" | "code" | "url" | "br" | "del" | "text" | "escape" | "tag" | "reflink" | "nolink" | "_backpedal" | "anyPunctuation" | "autolink" | "blockSkip" | "emStrongLDelim" | "emStrongRDelimAst" | "emStrongRDelimUnd" | "punctuation" | "reflinkSearch", RegExp>;
			breaks: Record<"link" | "code" | "url" | "br" | "del" | "text" | "escape" | "tag" | "reflink" | "nolink" | "_backpedal" | "anyPunctuation" | "autolink" | "blockSkip" | "emStrongLDelim" | "emStrongRDelimAst" | "emStrongRDelimUnd" | "punctuation" | "reflinkSearch", RegExp>;
			pedantic: Record<"link" | "code" | "url" | "br" | "del" | "text" | "escape" | "tag" | "reflink" | "nolink" | "_backpedal" | "anyPunctuation" | "autolink" | "blockSkip" | "emStrongLDelim" | "emStrongRDelimAst" | "emStrongRDelimUnd" | "punctuation" | "reflinkSearch", RegExp>;
		};
	};
	/**
	 * Static Lex Method
	 */
	static lex(src: string, options?: MarkedOptions): TokensList;
	/**
	 * Static Lex Inline Method
	 */
	static lexInline(src: string, options?: MarkedOptions): Token[];
	/**
	 * Preprocessing
	 */
	lex(src: string): TokensList;
	/**
	 * Lexing
	 */
	blockTokens(src: string, tokens?: Token[], lastParagraphClipped?: boolean): Token[];
	blockTokens(src: string, tokens?: TokensList, lastParagraphClipped?: boolean): TokensList;
	inline(src: string, tokens?: Token[]): Token[];
	/**
	 * Lexing/Compiling
	 */
	inlineTokens(src: string, tokens?: Token[]): Token[];
}
/**
 * Gets the original marked default options.
 */
declare function _getDefaults(): MarkedOptions;
type MaybePromise = void | Promise<void>;
/**
 * Compiles markdown to HTML asynchronously.
 *
 * @param src String of markdown source to be compiled
 * @param options Hash of options, having async: true
 * @return Promise of string of compiled HTML
 */
declare function marked(src: string, options: MarkedOptions & {
	async: true;
}): Promise<string>;
/**
 * Compiles markdown to HTML.
 *
 * @param src String of markdown source to be compiled
 * @param options Optional hash of options
 * @return String of compiled HTML. Will be a Promise of string if async is set to true by any extensions.
 */
declare function marked(src: string, options: MarkedOptions & {
	async: false;
}): string;
declare function marked(src: string, options: MarkedOptions & {
	async: true;
}): Promise<string>;
declare function marked(src: string, options?: MarkedOptions | null): string | Promise<string>;
declare namespace marked {
	var options: (options: MarkedOptions) => typeof marked;
	var setOptions: (options: MarkedOptions) => typeof marked;
	var getDefaults: typeof _getDefaults;
	var defaults: MarkedOptions;
	var use: (...args: MarkedExtension[]) => typeof marked;
	var walkTokens: (tokens: Token[] | TokensList, callback: (token: Token) => MaybePromise | MaybePromise[]) => MaybePromise[];
	var parseInline: {
		(src: string, options: MarkedOptions & {
			async: true;
		}): Promise<string>;
		(src: string, options: MarkedOptions & {
			async: false;
		}): string;
		(src: string, options?: MarkedOptions | null): string | Promise<string>;
	};
	var Parser: typeof _Parser;
	var parser: typeof _Parser.parse;
	var Renderer: typeof _Renderer;
	var TextRenderer: typeof _TextRenderer;
	var Lexer: typeof _Lexer;
	var lexer: typeof _Lexer.lex;
	var Tokenizer: typeof _Tokenizer;
	var Hooks: typeof _Hooks;
	var parse: typeof marked;
}

interface TrustContext {
    command: string;
    url: string;
    protocol: string;
}

/** Documentation: https://katex.org/docs/options.html */
interface KatexOptions$1 {
    /**
     * If `true`, math will be rendered in display mode
     * (math in display style and center math on page)
     *
     * If `false`, math will be rendered in inline mode
     * @default false
     */
    displayMode?: boolean | undefined;
    /**
     * Determines the markup language of the output. The valid choices are:
     * - `html`: Outputs KaTeX in HTML only.
     * - `mathml`: Outputs KaTeX in MathML only.
     * - `htmlAndMathml`: Outputs HTML for visual rendering
     *   and includes MathML for accessibility.
     *
     * @default 'htmlAndMathml'
     */
    output?: "html" | "mathml" | "htmlAndMathml" | undefined;
    /**
     * If `true`, display math has \tags rendered on the left
     * instead of the right, like \usepackage[leqno]{amsmath} in LaTeX.
     *
     * @default false
     */
    leqno?: boolean | undefined;
    /**
     * If `true`, display math renders flush left with a 2em left margin,
     * like \documentclass[fleqn] in LaTeX with the amsmath package.
     *
     * @default false
     */
    fleqn?: boolean | undefined;
    /**
     * If `true`, KaTeX will throw a `ParseError` when
     * it encounters an unsupported command or invalid LaTex
     *
     * If `false`, KaTeX will render unsupported commands as
     * text, and render invalid LaTeX as its source code with
     * hover text giving the error, in color given by errorColor
     * @default true
     */
    throwOnError?: boolean | undefined;
    /**
     * A Color string given in format `#XXX` or `#XXXXXX`
     */
    errorColor?: string | undefined;
    /**
     * A collection of custom macros.
     *
     * See `src/macros.js` for its usage
     */
    macros?: any;
    /**
     * Specifies a minimum thickness, in ems, for fraction lines,
     * \sqrt top lines, {array} vertical lines, \hline, \hdashline,
     * \underline, \overline, and the borders of \fbox, \boxed, and
     * \fcolorbox.
     */
    minRuleThickness?: number | undefined;
    /**
     * If `true`, `\color` will work like LaTeX's `\textcolor`
     * and takes 2 arguments
     *
     * If `false`, `\color` will work like LaTeX's `\color`
     * and takes 1 argument
     *
     * In both cases, `\textcolor` works as in LaTeX
     *
     * @default false
     */
    colorIsTextColor?: boolean | undefined;
    /**
     * All user-specified sizes will be caped to `maxSize` ems
     *
     * If set to Infinity, users can make elements and space
     * arbitrarily large
     *
     * @default Infinity
     */
    maxSize?: number | undefined;
    /**
     * Limit the number of macro expansions to specified number
     *
     * If set to `Infinity`, marco expander will try to fully expand
     * as in LaTex
     *
     * @default 1000
     */
    maxExpand?: number | undefined;
    /**
     * If `false` or `"ignore"`, allow features that make
     * writing in LaTex convenient but not supported by LaTex
     *
     * If `true` or `"error"`, throw an error for such transgressions
     *
     * If `"warn"`, warn about behavior via `console.warn`
     *
     * @default "warn"
     */
    strict?: boolean | string | Function | undefined;
    /**
     * If `false` (do not trust input), prevent any commands that could enable adverse behavior, rendering them instead in errorColor.
     *
     * If `true` (trust input), allow all such commands.
     *
     * @default false
     */
    trust?: boolean | ((context: TrustContext) => boolean) | undefined;
    /**
     * Place KaTeX code in the global group.
     *
     * @default false
     */
    globalGroup?: boolean | undefined;
}

interface MarkedKatexOptions extends KatexOptions$1 {
  nonStandard?: boolean
}

declare function markedKatex(options?: MarkedKatexOptions): MarkedExtension;

/** github-markdown 主题样式 */
declare const enum GithubMarkdownThemes {
    /**
     * GitHub Markdown 自动识别白天/黑夜模式
     */
    GitHub = "github-markdown.css",
    /**
     * GitHub Markdown 深色主题
     */
    GitHubDark = "github-markdown-dark.css",
    /**
     * GitHub Markdown 浅色主题
     */
    GitHubLight = "github-markdown-light.css"
}
/**
 * Highlight.js 代码高亮主题
 */
declare enum HighlightJsThemes {
    /** 1C 企业浅色主题 */
    OneCLight = "1c-light.css",
    /** 1C 企业浅色主题(压缩) */
    OneCLightMin = "1c-light.min.css",
    /** 无障碍深色主题 */
    A11yDark = "a11y-dark.css",
    /** 无障碍深色主题(压缩) */
    A11yDarkMin = "a11y-dark.min.css",
    /** 无障碍浅色主题 */
    A11yLight = "a11y-light.css",
    /** 无障碍浅色主题(压缩) */
    A11yLightMin = "a11y-light.min.css",
    /** Agate 主题 */
    Agate = "agate.css",
    /** Agate 主题(压缩) */
    AgateMin = "agate.min.css",
    /** An Old Hope 主题 */
    AnOldHope = "an-old-hope.css",
    /** An Old Hope 主题(压缩) */
    AnOldHopeMin = "an-old-hope.min.css",
    /** Android Studio 主题 */
    AndroidStudio = "androidstudio.css",
    /** Android Studio 主题(压缩) */
    AndroidStudioMin = "androidstudio.min.css",
    /** Arduino 浅色主题 */
    ArduinoLight = "arduino-light.css",
    /** Arduino 浅色主题(压缩) */
    ArduinoLightMin = "arduino-light.min.css",
    /** Arta 主题 */
    Arta = "arta.css",
    /** Arta 主题(压缩) */
    ArtaMin = "arta.min.css",
    /** Ascetic 主题 */
    Ascetic = "ascetic.css",
    /** Ascetic 主题(压缩) */
    AsceticMin = "ascetic.min.css",
    /** Atom One 深色合理主题 */
    AtomOneDarkReasonable = "atom-one-dark-reasonable.css",
    /** Atom One 深色合理主题(压缩) */
    AtomOneDarkReasonableMin = "atom-one-dark-reasonable.min.css",
    /** Atom One 深色主题 */
    AtomOneDark = "atom-one-dark.css",
    /** Atom One 深色主题(压缩) */
    AtomOneDarkMin = "atom-one-dark.min.css",
    /** Atom One 浅色主题 */
    AtomOneLight = "atom-one-light.css",
    /** Atom One 浅色主题(压缩) */
    AtomOneLightMin = "atom-one-light.min.css",
    /** 棕色纸张主题 */
    BrownPaper = "brown-paper.css",
    /** 棕色纸张主题(压缩) */
    BrownPaperMin = "brown-paper.min.css",
    /** CodePen 嵌入主题 */
    CodePenEmbed = "codepen-embed.css",
    /** CodePen 嵌入主题(压缩) */
    CodePenEmbedMin = "codepen-embed.min.css",
    /** Color Brewer 主题 */
    ColorBrewer = "color-brewer.css",
    /** Color Brewer 主题(压缩) */
    ColorBrewerMin = "color-brewer.min.css",
    /** 深色主题 */
    Dark = "dark.css",
    /** 深色主题(压缩) */
    DarkMin = "dark.min.css",
    /** 默认主题 */
    Default = "default.css",
    /** 默认主题(压缩) */
    DefaultMin = "default.min.css",
    /** DeviBeans 主题 */
    DeviBeans = "devibeans.css",
    /** DeviBeans 主题(压缩) */
    DeviBeansMin = "devibeans.min.css",
    /** Docco 主题 */
    Docco = "docco.css",
    /** Docco 主题(压缩) */
    DoccoMin = "docco.min.css",
    /** Far 主题 */
    Far = "far.css",
    /** Far 主题(压缩) */
    FarMin = "far.min.css",
    /** Felipec 主题 */
    Felipec = "felipec.css",
    /** Felipec 主题(压缩) */
    FelipecMin = "felipec.min.css",
    /** Foundation 主题 */
    Foundation = "foundation.css",
    /** Foundation 主题(压缩) */
    FoundationMin = "foundation.min.css",
    /** GitHub 黑暗减弱主题 */
    GitHubDarkDimmed = "github-dark-dimmed.css",
    /** GitHub 黑暗减弱主题(压缩) */
    GitHubDarkDimmedMin = "github-dark-dimmed.min.css",
    /** GitHub 黑暗主题 */
    GitHubDark = "github-dark.css",
    /** GitHub 黑暗主题(压缩) */
    GitHubDarkMin = "github-dark.min.css",
    /** GitHub 主题 */
    GitHub = "github.css",
    /** GitHub 主题(压缩) */
    GitHubMin = "github.min.css",
    /** GML 主题 */
    Gml = "gml.css",
    /** GML 主题(压缩) */
    GmlMin = "gml.min.css",
    /** Google Code 主题 */
    GoogleCode = "googlecode.css",
    /** Google Code 主题(压缩) */
    GoogleCodeMin = "googlecode.min.css",
    /** 渐变深色主题 */
    GradientDark = "gradient-dark.css",
    /** 渐变深色主题(压缩) */
    GradientDarkMin = "gradient-dark.min.css",
    /** 渐变浅色主题 */
    GradientLight = "gradient-light.css",
    /** 渐变浅色主题(压缩) */
    GradientLightMin = "gradient-light.min.css",
    /** 灰度主题 */
    Grayscale = "grayscale.css",
    /** 灰度主题(压缩) */
    GrayscaleMin = "grayscale.min.css",
    /** 混合主题 */
    Hybrid = "hybrid.css",
    /** 混合主题(压缩) */
    HybridMin = "hybrid.min.css",
    /** IDEA 主题 */
    Idea = "idea.css",
    /** IDEA 主题(压缩) */
    IdeaMin = "idea.min.css",
    /** IntelliJ 浅色主题 */
    IntelliJLight = "intellij-light.css",
    /** IntelliJ 浅色主题(压缩) */
    IntelliJLightMin = "intellij-light.min.css",
    /** IR 黑色主题 */
    IrBlack = "ir-black.css",
    /** IR 黑色主题(压缩) */
    IrBlackMin = "ir-black.min.css",
    /** ISBL 深色编辑器主题 */
    IsblEditorDark = "isbl-editor-dark.css",
    /** ISBL 深色编辑器主题(压缩) */
    IsblEditorDarkMin = "isbl-editor-dark.min.css",
    /** ISBL 浅色编辑器主题 */
    IsblEditorLight = "isbl-editor-light.css",
    /** ISBL 浅色编辑器主题(压缩) */
    IsblEditorLightMin = "isbl-editor-light.min.css",
    /** Kimbie 深色主题 */
    KimbieDark = "kimbie-dark.css",
    /** Kimbie 深色主题(压缩) */
    KimbieDarkMin = "kimbie-dark.min.css",
    /** Kimbie 浅色主题 */
    KimbieLight = "kimbie-light.css",
    /** Kimbie 浅色主题(压缩) */
    KimbieLightMin = "kimbie-light.min.css",
    /** Lightfair 主题 */
    Lightfair = "lightfair.css",
    /** Lightfair 主题(压缩) */
    LightfairMin = "lightfair.min.css",
    /** Lioshi 主题 */
    Lioshi = "lioshi.css",
    /** Lioshi 主题(压缩) */
    LioshiMin = "lioshi.min.css",
    /** Magula 主题 */
    Magula = "magula.css",
    /** Magula 主题(压缩) */
    MagulaMin = "magula.min.css",
    /** Mono Blue 主题 */
    MonoBlue = "mono-blue.css",
    /** Mono Blue 主题(压缩) */
    MonoBlueMin = "mono-blue.min.css",
    /** Monokai Sublime 主题 */
    MonokaiSublime = "monokai-sublime.css",
    /** Monokai Sublime 主题(压缩) */
    MonokaiSublimeMin = "monokai-sublime.min.css",
    /** Monokai 主题 */
    Monokai = "monokai.css",
    /** Monokai 主题(压缩) */
    MonokaiMin = "monokai.min.css",
    /** 夜枭主题 */
    NightOwl = "night-owl.css",
    /** 夜枭主题(压缩) */
    NightOwlMin = "night-owl.min.css",
    /** NNFX 深色主题 */
    NnfxDark = "nnfx-dark.css",
    /** NNFX 深色主题(压缩) */
    NnfxDarkMin = "nnfx-dark.min.css",
    /** NNFX 浅色主题 */
    NnfxLight = "nnfx-light.css",
    /** NNFX 浅色主题(压缩) */
    NnfxLightMin = "nnfx-light.min.css",
    /** 北极主题 */
    Nord = "nord.css",
    /** 北极主题(压缩) */
    NordMin = "nord.min.css",
    /** 黑曜石主题 */
    Obsidian = "obsidian.css",
    /** 黑曜石主题(压缩) */
    ObsidianMin = "obsidian.min.css",
    /** 熊猫深色语法主题 */
    PandaSyntaxDark = "panda-syntax-dark.css",
    /** 熊猫深色语法主题(压缩) */
    PandaSyntaxDarkMin = "panda-syntax-dark.min.css",
    /** 熊猫浅色语法主题 */
    PandaSyntaxLight = "panda-syntax-light.css",
    /** 熊猫浅色语法主题(压缩) */
    PandaSyntaxLightMin = "panda-syntax-light.min.css",
    /** Paraiso 深色主题 */
    ParaisoDark = "paraiso-dark.css",
    /** Paraiso 深色主题(压缩) */
    ParaisoDarkMin = "paraiso-dark.min.css",
    /** Paraiso 浅色主题 */
    ParaisoLight = "paraiso-light.css",
    /** Paraiso 浅色主题(压缩) */
    ParaisoLightMin = "paraiso-light.min.css",
    /** Pojoaque 主题 */
    Pojoaque = "pojoaque.css",
    /** 纯基础主题 */
    PureBasic = "purebasic.css",
    /** 纯基础主题(压缩) */
    PureBasicMin = "purebasic.min.css",
    /** Qt Creator 深色主题 */
    QtCreatorDark = "qtcreator-dark.css",
    /** Qt Creator 深色主题(压缩) */
    QtCreatorDarkMin = "qtcreator-dark.min.css",
    /** Qt Creator 浅色主题 */
    QtCreatorLight = "qtcreator-light.css",
    /** Qt Creator 浅色主题(压缩) */
    QtCreatorLightMin = "qtcreator-light.min.css",
    /** 彩虹主题 */
    Rainbow = "rainbow.css",
    /** 彩虹主题(压缩) */
    RainbowMin = "rainbow.min.css",
    /** RouterOS 主题 */
    RouterOs = "routeros.css",
    /** RouterOS 主题(压缩) */
    RouterOsMin = "routeros.min.css",
    /** 校书主题 */
    SchoolBook = "school-book.css",
    /** 校书主题(压缩) */
    SchoolBookMin = "school-book.min.css",
    /** 紫色阴影主题 */
    ShadesOfPurple = "shades-of-purple.css",
    /** 紫色阴影主题(压缩) */
    ShadesOfPurpleMin = "shades-of-purple.min.css",
    /** Srcery 主题 */
    Srcery = "srcery.css",
    /** Srcery 主题(压缩) */
    SrceryMin = "srcery.min.css",
    /** StackOverflow 深色主题 */
    StackOverflowDark = "stackoverflow-dark.css",
    /** StackOverflow 深色主题(压缩) */
    StackOverflowDarkMin = "stackoverflow-dark.min.css",
    /** StackOverflow 浅色主题 */
    StackOverflowLight = "stackoverflow-light.css",
    /** StackOverflow 浅色主题(压缩) */
    StackOverflowLightMin = "stackoverflow-light.min.css",
    /** Sunburst 主题 */
    Sunburst = "sunburst.css",
    /** Sunburst 主题(压缩) */
    SunburstMin = "sunburst.min.css",
    /** Tokyo Night 深色主题 */
    TokyoNightDark = "tokyo-night-dark.css",
    /** Tokyo Night 深色主题(压缩) */
    TokyoNightDarkMin = "tokyo-night-dark.min.css",
    /** Tokyo Night 浅色主题 */
    TokyoNightLight = "tokyo-night-light.css",
    /** Tokyo Night 浅色主题(压缩) */
    TokyoNightLightMin = "tokyo-night-light.min.css",
    /** 明天夜晚蓝色主题 */
    TomorrowNightBlue = "tomorrow-night-blue.css",
    /** 明天夜晚蓝色主题(压缩) */
    TomorrowNightBlueMin = "tomorrow-night-blue.min.css",
    /** 明天夜晚亮色主题 */
    TomorrowNightBright = "tomorrow-night-bright.css",
    /** 明天夜晚亮色主题(压缩) */
    TomorrowNightBrightMin = "tomorrow-night-bright.min.css",
    /** Visual Studio 主题 */
    Vs = "vs.css",
    /** Visual Studio 主题(压缩) */
    VsMin = "vs.min.css",
    /** Visual Studio 2015 主题 */
    Vs2015 = "vs2015.css",
    /** Visual Studio 2015 主题(压缩) */
    Vs2015Min = "vs2015.min.css",
    /** Xcode 主题 */
    Xcode = "xcode.css",
    /** Xcode 主题(压缩) */
    XcodeMin = "xcode.min.css",
    /** XT256 主题 */
    Xt256 = "xt256.css",
    /** XT256 主题(压缩) */
    Xt256Min = "xt256.min.css",
    CYBERTOPIA_CHERRY_MIN = "cybertopia-cherry.min.css",
    CYBERTOPIA_DIMMER_MIN = "cybertopia-dimmer.min.css",
    CYBERTOPIA_ICECAP_MIN = "cybertopia-icecap.min.css",
    CYBERTOPIA_SATURATED_MIN = "cybertopia-saturated.min.css",
    POJOAQUE_MIN = "pojoaque.min.css",
    ROSE_PINE_DAWN_MIN = "rose-pine-dawn.min.css",
    ROSE_PINE_MOON_MIN = "rose-pine-moon.min.css",
    ROSE_PINE_MIN = "rose-pine.min.css",
    BASE16_3024_MIN = "base16/3024.min.css",
    BASE16_APATHY_MIN = "base16/apathy.min.css",
    BASE16_APPRENTICE_MIN = "base16/apprentice.min.css",
    BASE16_ASHES_MIN = "base16/ashes.min.css",
    BASE16_ATELIER_CAVE_LIGHT_MIN = "base16/atelier-cave-light.min.css",
    BASE16_ATELIER_CAVE_MIN = "base16/atelier-cave.min.css",
    BASE16_ATELIER_DUNE_LIGHT_MIN = "base16/atelier-dune-light.min.css",
    BASE16_ATELIER_DUNE_MIN = "base16/atelier-dune.min.css",
    BASE16_ATELIER_ESTUARY_LIGHT_MIN = "base16/atelier-estuary-light.min.css",
    BASE16_ATELIER_ESTUARY_MIN = "base16/atelier-estuary.min.css",
    BASE16_ATELIER_FOREST_LIGHT_MIN = "base16/atelier-forest-light.min.css",
    BASE16_ATELIER_FOREST_MIN = "base16/atelier-forest.min.css",
    BASE16_ATELIER_HEATH_LIGHT_MIN = "base16/atelier-heath-light.min.css",
    BASE16_ATELIER_HEATH_MIN = "base16/atelier-heath.min.css",
    BASE16_ATELIER_LAKESIDE_LIGHT_MIN = "base16/atelier-lakeside-light.min.css",
    BASE16_ATELIER_LAKESIDE_MIN = "base16/atelier-lakeside.min.css",
    BASE16_ATELIER_PLATEAU_LIGHT_MIN = "base16/atelier-plateau-light.min.css",
    BASE16_ATELIER_PLATEAU_MIN = "base16/atelier-plateau.min.css",
    BASE16_ATELIER_SAVANNA_LIGHT_MIN = "base16/atelier-savanna-light.min.css",
    BASE16_ATELIER_SAVANNA_MIN = "base16/atelier-savanna.min.css",
    BASE16_ATELIER_SEASIDE_LIGHT_MIN = "base16/atelier-seaside-light.min.css",
    BASE16_ATELIER_SEASIDE_MIN = "base16/atelier-seaside.min.css",
    BASE16_ATELIER_SULPHURPOOL_LIGHT_MIN = "base16/atelier-sulphurpool-light.min.css",
    BASE16_ATELIER_SULPHURPOOL_MIN = "base16/atelier-sulphurpool.min.css",
    BASE16_ATLAS_MIN = "base16/atlas.min.css",
    BASE16_BESPIN_MIN = "base16/bespin.min.css",
    BASE16_BLACK_METAL_BATHORY_MIN = "base16/black-metal-bathory.min.css",
    BASE16_BLACK_METAL_BURZUM_MIN = "base16/black-metal-burzum.min.css",
    BASE16_BLACK_METAL_DARK_FUNERAL_MIN = "base16/black-metal-dark-funeral.min.css",
    BASE16_BLACK_METAL_GORGOROTH_MIN = "base16/black-metal-gorgoroth.min.css",
    BASE16_BLACK_METAL_IMMORTAL_MIN = "base16/black-metal-immortal.min.css",
    BASE16_BLACK_METAL_KHOLD_MIN = "base16/black-metal-khold.min.css",
    BASE16_BLACK_METAL_MARDUK_MIN = "base16/black-metal-marduk.min.css",
    BASE16_BLACK_METAL_MAYHEM_MIN = "base16/black-metal-mayhem.min.css",
    BASE16_BLACK_METAL_NILE_MIN = "base16/black-metal-nile.min.css",
    BASE16_BLACK_METAL_VENOM_MIN = "base16/black-metal-venom.min.css",
    BASE16_BLACK_METAL_MIN = "base16/black-metal.min.css",
    BASE16_BREWER_MIN = "base16/brewer.min.css",
    BASE16_BRIGHT_MIN = "base16/bright.min.css",
    BASE16_BROGRAMMER_MIN = "base16/brogrammer.min.css",
    BASE16_BRUSH_TREES_DARK_MIN = "base16/brush-trees-dark.min.css",
    BASE16_BRUSH_TREES_MIN = "base16/brush-trees.min.css",
    BASE16_CHALK_MIN = "base16/chalk.min.css",
    BASE16_CIRCUS_MIN = "base16/circus.min.css",
    BASE16_CLASSIC_DARK_MIN = "base16/classic-dark.min.css",
    BASE16_CLASSIC_LIGHT_MIN = "base16/classic-light.min.css",
    BASE16_CODESCHOOL_MIN = "base16/codeschool.min.css",
    BASE16_COLORS_MIN = "base16/colors.min.css",
    BASE16_CUPCAKE_MIN = "base16/cupcake.min.css",
    BASE16_CUPERTINO_MIN = "base16/cupertino.min.css",
    BASE16_DANQING_MIN = "base16/danqing.min.css",
    BASE16_DARCULA_MIN = "base16/darcula.min.css",
    BASE16_DARK_VIOLET_MIN = "base16/dark-violet.min.css",
    BASE16_DARKMOSS_MIN = "base16/darkmoss.min.css",
    BASE16_DARKTOOTH_MIN = "base16/darktooth.min.css",
    BASE16_DECAF_MIN = "base16/decaf.min.css",
    BASE16_DEFAULT_DARK_MIN = "base16/default-dark.min.css",
    BASE16_DEFAULT_LIGHT_MIN = "base16/default-light.min.css",
    BASE16_DIRTYSEA_MIN = "base16/dirtysea.min.css",
    BASE16_DRACULA_MIN = "base16/dracula.min.css",
    BASE16_EDGE_DARK_MIN = "base16/edge-dark.min.css",
    BASE16_EDGE_LIGHT_MIN = "base16/edge-light.min.css",
    BASE16_EIGHTIES_MIN = "base16/eighties.min.css",
    BASE16_EMBERS_MIN = "base16/embers.min.css",
    BASE16_EQUILIBRIUM_DARK_MIN = "base16/equilibrium-dark.min.css",
    BASE16_EQUILIBRIUM_GRAY_DARK_MIN = "base16/equilibrium-gray-dark.min.css",
    BASE16_EQUILIBRIUM_GRAY_LIGHT_MIN = "base16/equilibrium-gray-light.min.css",
    BASE16_EQUILIBRIUM_LIGHT_MIN = "base16/equilibrium-light.min.css",
    BASE16_ESPRESSO_MIN = "base16/espresso.min.css",
    BASE16_EVA_DIM_MIN = "base16/eva-dim.min.css",
    BASE16_EVA_MIN = "base16/eva.min.css",
    BASE16_FLAT_MIN = "base16/flat.min.css",
    BASE16_FRAMER_MIN = "base16/framer.min.css",
    BASE16_FRUIT_SODA_MIN = "base16/fruit-soda.min.css",
    BASE16_GIGAVOLT_MIN = "base16/gigavolt.min.css",
    BASE16_GITHUB_MIN = "base16/github.min.css",
    BASE16_GOOGLE_DARK_MIN = "base16/google-dark.min.css",
    BASE16_GOOGLE_LIGHT_MIN = "base16/google-light.min.css",
    BASE16_GRAYSCALE_DARK_MIN = "base16/grayscale-dark.min.css",
    BASE16_GRAYSCALE_LIGHT_MIN = "base16/grayscale-light.min.css",
    BASE16_GREEN_SCREEN_MIN = "base16/green-screen.min.css",
    BASE16_GRUVBOX_DARK_HARD_MIN = "base16/gruvbox-dark-hard.min.css",
    BASE16_GRUVBOX_DARK_MEDIUM_MIN = "base16/gruvbox-dark-medium.min.css",
    BASE16_GRUVBOX_DARK_PALE_MIN = "base16/gruvbox-dark-pale.min.css",
    BASE16_GRUVBOX_DARK_SOFT_MIN = "base16/gruvbox-dark-soft.min.css",
    BASE16_GRUVBOX_LIGHT_HARD_MIN = "base16/gruvbox-light-hard.min.css",
    BASE16_GRUVBOX_LIGHT_MEDIUM_MIN = "base16/gruvbox-light-medium.min.css",
    BASE16_GRUVBOX_LIGHT_SOFT_MIN = "base16/gruvbox-light-soft.min.css",
    BASE16_HARDCORE_MIN = "base16/hardcore.min.css",
    BASE16_HARMONIC16_DARK_MIN = "base16/harmonic16-dark.min.css",
    BASE16_HARMONIC16_LIGHT_MIN = "base16/harmonic16-light.min.css",
    BASE16_HEETCH_DARK_MIN = "base16/heetch-dark.min.css",
    BASE16_HEETCH_LIGHT_MIN = "base16/heetch-light.min.css",
    BASE16_HELIOS_MIN = "base16/helios.min.css",
    BASE16_HOPSCOTCH_MIN = "base16/hopscotch.min.css",
    BASE16_HORIZON_DARK_MIN = "base16/horizon-dark.min.css",
    BASE16_HORIZON_LIGHT_MIN = "base16/horizon-light.min.css",
    BASE16_HUMANOID_DARK_MIN = "base16/humanoid-dark.min.css",
    BASE16_HUMANOID_LIGHT_MIN = "base16/humanoid-light.min.css",
    BASE16_IA_DARK_MIN = "base16/ia-dark.min.css",
    BASE16_IA_LIGHT_MIN = "base16/ia-light.min.css",
    BASE16_ICY_DARK_MIN = "base16/icy-dark.min.css",
    BASE16_IR_BLACK_MIN = "base16/ir-black.min.css",
    BASE16_ISOTOPE_MIN = "base16/isotope.min.css",
    BASE16_KIMBER_MIN = "base16/kimber.min.css",
    BASE16_LONDON_TUBE_MIN = "base16/london-tube.min.css",
    BASE16_MACINTOSH_MIN = "base16/macintosh.min.css",
    BASE16_MARRAKESH_MIN = "base16/marrakesh.min.css",
    BASE16_MATERIA_MIN = "base16/materia.min.css",
    BASE16_MATERIAL_DARKER_MIN = "base16/material-darker.min.css",
    BASE16_MATERIAL_LIGHTER_MIN = "base16/material-lighter.min.css",
    BASE16_MATERIAL_PALENIGHT_MIN = "base16/material-palenight.min.css",
    BASE16_MATERIAL_VIVID_MIN = "base16/material-vivid.min.css",
    BASE16_MATERIAL_MIN = "base16/material.min.css",
    BASE16_MELLOW_PURPLE_MIN = "base16/mellow-purple.min.css",
    BASE16_MEXICO_LIGHT_MIN = "base16/mexico-light.min.css",
    BASE16_MOCHA_MIN = "base16/mocha.min.css",
    BASE16_MONOKAI_MIN = "base16/monokai.min.css",
    BASE16_NEBULA_MIN = "base16/nebula.min.css",
    BASE16_NORD_MIN = "base16/nord.min.css",
    BASE16_NOVA_MIN = "base16/nova.min.css",
    BASE16_OCEAN_MIN = "base16/ocean.min.css",
    BASE16_OCEANICNEXT_MIN = "base16/oceanicnext.min.css",
    BASE16_ONE_LIGHT_MIN = "base16/one-light.min.css",
    BASE16_ONEDARK_MIN = "base16/onedark.min.css",
    BASE16_OUTRUN_DARK_MIN = "base16/outrun-dark.min.css",
    BASE16_PAPERCOLOR_DARK_MIN = "base16/papercolor-dark.min.css",
    BASE16_PAPERCOLOR_LIGHT_MIN = "base16/papercolor-light.min.css",
    BASE16_PARAISO_MIN = "base16/paraiso.min.css",
    BASE16_PASQUE_MIN = "base16/pasque.min.css",
    BASE16_PHD_MIN = "base16/phd.min.css",
    BASE16_PICO_MIN = "base16/pico.min.css",
    BASE16_POP_MIN = "base16/pop.min.css",
    BASE16_PORPLE_MIN = "base16/porple.min.css",
    BASE16_QUALIA_MIN = "base16/qualia.min.css",
    BASE16_RAILSCASTS_MIN = "base16/railscasts.min.css",
    BASE16_REBECCA_MIN = "base16/rebecca.min.css",
    BASE16_ROS_PINE_DAWN_MIN = "base16/ros-pine-dawn.min.css",
    BASE16_ROS_PINE_MOON_MIN = "base16/ros-pine-moon.min.css",
    BASE16_ROS_PINE_MIN = "base16/ros-pine.min.css",
    BASE16_SAGELIGHT_MIN = "base16/sagelight.min.css",
    BASE16_SANDCASTLE_MIN = "base16/sandcastle.min.css",
    BASE16_SETI_UI_MIN = "base16/seti-ui.min.css",
    BASE16_SHAPESHIFTER_MIN = "base16/shapeshifter.min.css",
    BASE16_SILK_DARK_MIN = "base16/silk-dark.min.css",
    BASE16_SILK_LIGHT_MIN = "base16/silk-light.min.css",
    BASE16_SNAZZY_MIN = "base16/snazzy.min.css",
    BASE16_SOLAR_FLARE_LIGHT_MIN = "base16/solar-flare-light.min.css",
    BASE16_SOLAR_FLARE_MIN = "base16/solar-flare.min.css",
    BASE16_SOLARIZED_DARK_MIN = "base16/solarized-dark.min.css",
    BASE16_SOLARIZED_LIGHT_MIN = "base16/solarized-light.min.css",
    BASE16_SPACEMACS_MIN = "base16/spacemacs.min.css",
    BASE16_SUMMERCAMP_MIN = "base16/summercamp.min.css",
    BASE16_SUMMERFRUIT_DARK_MIN = "base16/summerfruit-dark.min.css",
    BASE16_SUMMERFRUIT_LIGHT_MIN = "base16/summerfruit-light.min.css",
    BASE16_SYNTH_MIDNIGHT_TERMINAL_DARK_MIN = "base16/synth-midnight-terminal-dark.min.css",
    BASE16_SYNTH_MIDNIGHT_TERMINAL_LIGHT_MIN = "base16/synth-midnight-terminal-light.min.css",
    BASE16_TANGO_MIN = "base16/tango.min.css",
    BASE16_TENDER_MIN = "base16/tender.min.css",
    BASE16_TOMORROW_NIGHT_MIN = "base16/tomorrow-night.min.css",
    BASE16_TOMORROW_MIN = "base16/tomorrow.min.css",
    BASE16_TWILIGHT_MIN = "base16/twilight.min.css",
    BASE16_UNIKITTY_DARK_MIN = "base16/unikitty-dark.min.css",
    BASE16_UNIKITTY_LIGHT_MIN = "base16/unikitty-light.min.css",
    BASE16_VULCAN_MIN = "base16/vulcan.min.css",
    BASE16_WINDOWS_10_LIGHT_MIN = "base16/windows-10-light.min.css",
    BASE16_WINDOWS_10_MIN = "base16/windows-10.min.css",
    BASE16_WINDOWS_95_LIGHT_MIN = "base16/windows-95-light.min.css",
    BASE16_WINDOWS_95_MIN = "base16/windows-95.min.css",
    BASE16_WINDOWS_HIGH_CONTRAST_LIGHT_MIN = "base16/windows-high-contrast-light.min.css",
    BASE16_WINDOWS_HIGH_CONTRAST_MIN = "base16/windows-high-contrast.min.css",
    BASE16_WINDOWS_NT_LIGHT_MIN = "base16/windows-nt-light.min.css",
    BASE16_WINDOWS_NT_MIN = "base16/windows-nt.min.css",
    BASE16_WOODLAND_MIN = "base16/woodland.min.css",
    BASE16_XCODE_DUSK_MIN = "base16/xcode-dusk.min.css",
    BASE16_ZENBURN_MIN = "base16/zenburn.min.css"
}

/** 提取 KatexOptions 类型 */
type KatexOptions = Parameters<typeof markedKatex>[0];
/** 渲染参数 */
interface Options {
    /** Html模板字符串 或 模板文件路径 */
    template?: string;
    /** KaTeX 配置 */
    katex?: KatexOptions;
    /** github-markdown-css样式 默认为 GitHub Markdown 自动识别白天/黑夜模式 */
    gitcss?: `${GithubMarkdownThemes}`;
    /** Highlight主题配置 默认为 GitHub 主题 */
    highlight?: `${HighlightJsThemes}`;
    /** 自定义字体族 */
    fontFamily?: string;
    /** 缩放比例 (0.1-5.0) */
    scale?: number;
    /** 远程字体CSS链接数组 */
    fontLinks?: string[];
    /** 自定义CSS样式字符串 */
    customCSS?: string;
    /** 自定义CSS文件路径数组 */
    customCSSFiles?: string[];
}
declare const markedClient: typeof marked;
/** 当前 npm 包的绝对路径 */
declare const pkgpath: string;
/** 默认html模板名称 */
declare const htmlPath: string;
/** Markdown 渲染器 */
declare class Markdown {
    /** 渲染参数 */
    config?: Options;
    /** Html模板内容 */
    template: string;
    /** Html模板文件路径 */
    templatepath: string;
    /** github-markdown-css样式 */
    gitcss: string;
    /** Highlight主题配置 */
    highlight: string;
    /** marked 实例 */
    marked: typeof markedClient;
    constructor(config: Options);
    init(): void;
    /**
     * 渲染Markdown文件
     * @param markdown Markdown文件路径 或 Markdown文本
     */
    render(markdown: string): string;
}
/**
 * 渲染Markdown文件
 * @param text - Markdown文件路径 或 Markdown文本
 * @param options - 渲染参数
 * @returns - 渲染后的Html字符串
 */
declare const markdown: (text: string, options: Options) => string;

export { type KatexOptions, Markdown, type Options, Markdown as default, htmlPath, markdown, pkgpath };
